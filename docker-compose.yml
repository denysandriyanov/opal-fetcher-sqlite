version: "3.8"
services:
  broadcast_channel:
    image: redis:5
  opal_server:
    image: permitio/opal-server:latest
    environment:
      # the broadcast backbone uri used by opal server workers (see comments above for: broadcast_channel)
      - OPAL_BROADCAST_URI=redis://broadcast_channel:6379
      # number of uvicorn workers to run inside the opal-server container
      - UVICORN_NUM_WORKERS=4
      # the git repo hosting OPAL example policy
      # - if this repo is not public, you can pass an ssh key via `OPAL_POLICY_REPO_SSH_KEY`)
      # - the repo we pass in this example is *public* and acts as an example repo with dummy rego policy
      # - for more info, see: https://github.com/permitio/opal/blob/master/docs/HOWTO/track_a_git_repo.md
      - OPAL_POLICY_REPO_URL=https://github.com/permitio/opal-example-policy-repo
      # in this example we will use a polling interval of 30 seconds to check for new policy updates (git commits affecting the rego policy).
      # however, it is better to utilize a git *webhook* to trigger the server to check for changes only when the repo has new commits.
      # for more info see: https://github.com/permitio/opal/blob/master/docs/HOWTO/track_a_git_repo.md
      - OPAL_POLICY_REPO_POLLING_INTERVAL=30
      # configures from where the opal client should initially fetch data (when it first goes up, after disconnection, etc).
      # the data sources represents from where the opal clients should get a "complete picture" of the data they need.
      # after the initial sources are fetched, the client will subscribe only to update notifications sent by the server.
      # Add "fetch_key":"city_id" to get an object with keys of city_id, rather than a list
      - OPAL_DATA_CONFIG_SOURCES={"config":{"entries":[{"topics":["policy_data"],"dst_path":"cities","url":"file:/db/opal.db","periodic_update_interval":1.0,"config":{"fetcher":"SQLiteFetchProvider","query":"SELECT * FROM city;"}}]}}
    ports:
      - "7002:7002"
    depends_on:
      - broadcast_channel

  opal_client:
    build:
      context: .
    environment:
      - OPAL_SERVER_URL=http://opal_server:7002
      - OPAL_FETCH_PROVIDER_MODULES=opal_common.fetcher.providers,opal_fetcher_sqlite.provider
      - OPAL_INLINE_OPA_LOG_FORMAT=http
        # update callbacks config ----------------------------------
        # this var turns on a callback (HTTP call to a configurable url) after every successful data update
        # and allows you to track which data updates completed successfully and were saved to OPA cache.
      - OPAL_SHOULD_REPORT_ON_DATA_UPDATES=True
        # we configure a callback to go to a default location in the OPAL server, but you can configure
        # a callback to any url you'd like. Each callback is either the url alone, or a tuple of
        # (url, HttpFetcherConfig).
        # We show here both ways to configure the same endpoint, one of them demonstrate how to
        # add extra HTTP headers (the header shown is ignored, only here for example).
      - OPAL_DEFAULT_UPDATE_CALLBACKS={"callbacks":["http://opal_server:7002/data/callback_report"]}
        # - OPAL_DEFAULT_UPDATE_CALLBACKS={"callbacks":[("http://opal_server:7002/data/callback_report",{"headers":{"X-My-Token":"token"}})]}
        # OPAL can load a special policy into OPA that acts as a healthcheck policy (Not directly related to the callback feature).
        # This policy defines two opa rules you can query:
        # ready rule (POST http://localhost:8181/data/system/opal/ready): signals that OPA is ready to accept authorization queries.
        # healthy rule (POST http://localhost:8181/data/system/opal/ready): signals that the last policy and data updates succeeded.
      - OPAL_OPA_HEALTH_CHECK_POLICY_ENABLED=True
        # end of update callbacks config ---------------------------
    ports:
      - "7000:7000"
      - "8181:8181"
    depends_on:
      - opal_server
    volumes:
      - ./opal.db:/db/opal.db
      # this command is not necessary when deploying OPAL for real, it is simply a trick for dev environments
    # to make sure that opal-server is already up before starting the client.
    command: sh -c "/start.sh"